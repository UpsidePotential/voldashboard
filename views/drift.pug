extends layout
include mixins/fundingchart

block content
    script.
        var data = !{JSON.stringify(data)};

    .container
        script(src="https://code.highcharts.com/highcharts.js")
        script(src="https://code.highcharts.com/stock/modules/stock.js")
        script(src="https://code.highcharts.com/stock/indicators/indicators.js")
        script.
           var columnSorted = -1; // Variable to track the currently sorted column index
           function sortTable(n) {
                var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
                table = document.querySelector('table');
                switching = true;
                // Set the sorting direction to ascending:
                dir = "asc"; 
                /* Make a loop that will continue until
                no switching has been done: */
                while (switching) {
                // Start by saying: no switching is done:
                switching = false;
                rows = table.rows;
                /* Loop through all table rows (except the
                first, which contains table headers): */
                for (i = 1; i < (rows.length - 1); i++) {
                    // Start by saying there should be no switching:
                    shouldSwitch = false;
                    /* Get the two elements you want to compare,
                    one from current row and one from the next: */
                    x = rows[i].getElementsByTagName("td")[n];
                    y = rows[i + 1].getElementsByTagName("td")[n];
                    /* Check if the two rows should switch place,
                    based on the direction, asc or desc: */
                    if (dir == "asc") {
                    if (parseFloat(x.innerHTML) > parseFloat(y.innerHTML)) {
                        // If so, mark as a switch and break the loop:
                        shouldSwitch= true;
                        break;
                    }
                    } else if (dir == "desc") {
                    if (parseFloat(x.innerHTML) < parseFloat(y.innerHTML)) {
                        // If so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;
                    }
                    }
                }
                if (shouldSwitch) {
                    /* If a switch has been marked, make the switch
                    and mark that a switch has been done: */
                    rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                    switching = true;
                    // Each time a switch is done, increase this count by 1:
                    switchcount ++;      
                } else {
                    /* If no switching has been done AND the direction is "asc",
                    set the direction to "desc" and run the while loop again. */
                    if (switchcount == 0 && dir == "asc") {
                    dir = "desc";
                    switching = true;
                    }
                }
                }
                // Update columnSorted to the index of the sorted column
                columnSorted = n;
            }
        div 
            table
                tr
                    th(onclick="sortTable(0)") Perp
                    th(onclick="sortTable(1)") APY
                    th(onclick="sortTable(2)") 1 Day Average
                    th(onclick="sortTable(3)") Spot Volume
                each n, index in data.fundingHistory
                    tr
                        td #{n.perp}
                        td #{n.history.slice(-1)[0][1].toFixed(4)}
                        td #{n.average.slice(-1)[0].average.toFixed(4)}
                        td #{n.coin ? n.coin.baseVolume : ''}
        div
            each val,index in data.fundingHistory
                div(id=`perp-${index}`)                
                +fundingchart(`#perp-${index}`, `data.fundingHistory[${index}].perp`, `data.fundingHistory[${index}].history`)

        

